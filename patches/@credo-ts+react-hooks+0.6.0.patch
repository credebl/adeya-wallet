diff --git a/node_modules/@credo-ts/react-hooks/build/AgentProvider.d.ts b/node_modules/@credo-ts/react-hooks/build/AgentProvider.d.ts
index 1c1c0c8..4a0c3cb 100644
--- a/node_modules/@credo-ts/react-hooks/build/AgentProvider.d.ts
+++ b/node_modules/@credo-ts/react-hooks/build/AgentProvider.d.ts
@@ -4,6 +4,7 @@ import * as React from 'react';
 interface AgentContextInterface<AppAgent extends Agent = Agent> {
     loading: boolean;
     agent: AppAgent;
+    setAgent: (agent: Agent) => void
 }
 export declare const useAgent: <AppAgent extends Agent<any>>() => AgentContextInterface<AppAgent>;
 interface Props {
diff --git a/node_modules/@credo-ts/react-hooks/build/AgentProvider.js b/node_modules/@credo-ts/react-hooks/build/AgentProvider.js
index 2f4560a..b6d2284 100644
--- a/node_modules/@credo-ts/react-hooks/build/AgentProvider.js
+++ b/node_modules/@credo-ts/react-hooks/build/AgentProvider.js
@@ -47,19 +47,24 @@ const useAgent = () => {
     return agentContext;
 };
 exports.useAgent = useAgent;
-const AgentProvider = ({ agent, children }) => {
-    const isQaRegistered = (0, recordUtils_1.useIsModuleRegistered)(agent, question_answer_1.QuestionAnswerModule);
-    const [agentState] = (0, react_1.useState)({
-        loading: false,
-        agent,
+const AgentProvider = ({ children }) => {
+    const isQaRegistered = false;
+    const [agentState, setState] = (0, react_1.useState)({
+        loading: true,
+        agent: undefined,
     });
-    return (React.createElement(AgentContext.Provider, { value: agentState },
-        React.createElement(ConnectionProvider_1.default, { agent: agent },
-            React.createElement(CredentialProvider_1.default, { agent: agent },
-                React.createElement(ProofProvider_1.default, { agent: agent },
-                    React.createElement(CredentialFormatDataProvider_1.default, { agent: agent },
-                        React.createElement(ProofFormatDataProvider_1.default, { agent: agent },
-                            React.createElement(BasicMessageProvider_1.default, { agent: agent }, isQaRegistered ? (React.createElement(QuestionAnswerProvider_1.default, { agent: agent },
+
+    const setAgent = (agent) => {
+        setState({ agent, loading: false })
+    }
+
+    return (React.createElement(AgentContext.Provider, { value: Object.assign({ setAgent }, agentState) },
+        React.createElement(ConnectionProvider_1.default, { agent: agentState.agent },
+            React.createElement(CredentialProvider_1.default, { agent: agentState.agent },
+                React.createElement(ProofProvider_1.default, { agent: agentState.agent },
+                    React.createElement(CredentialFormatDataProvider_1.default, { agent: agentState.agent },
+                        React.createElement(ProofFormatDataProvider_1.default, { agent: agentState.agent },
+                            React.createElement(BasicMessageProvider_1.default, { agent: agentState.agent }, isQaRegistered ? (React.createElement(QuestionAnswerProvider_1.default, { agent: agentState.agent },
                                 children,
                                 " ")) : (children)))))))));
 };