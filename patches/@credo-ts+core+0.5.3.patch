diff --git a/node_modules/@credo-ts/core/build/modules/routing/MediationRecipientApi.js b/node_modules/@credo-ts/core/build/modules/routing/MediationRecipientApi.js
index 7344332..0250817 100644
--- a/node_modules/@credo-ts/core/build/modules/routing/MediationRecipientApi.js
+++ b/node_modules/@credo-ts/core/build/modules/routing/MediationRecipientApi.js
@@ -74,7 +74,7 @@ let MediationRecipientApi = class MediationRecipientApi {
     }
     async sendMessage(outboundMessageContext, pickupStrategy) {
         const mediatorPickupStrategy = pickupStrategy !== null && pickupStrategy !== void 0 ? pickupStrategy : this.config.mediatorPickupStrategy;
-        const transportPriority = mediatorPickupStrategy === MediatorPickupStrategy_1.MediatorPickupStrategy.Implicit
+        const transportPriority = [MediatorPickupStrategy_1.MediatorPickupStrategy.Implicit, MediatorPickupStrategy_1.MediatorPickupStrategy.PickUpV2LiveMode].includes(mediatorPickupStrategy)
             ? { schemes: ['wss', 'ws'], restrictive: true }
             : undefined;
         await this.messageSender.sendMessage(outboundMessageContext, {
@@ -156,6 +156,7 @@ let MediationRecipientApi = class MediationRecipientApi {
                 this.logger.debug(`Websocket connection to mediator with connectionId '${mediator.connectionId}' is closed, attempting to reconnect...`);
                 try {
                     if (pickupStrategy === MediatorPickupStrategy_1.MediatorPickupStrategy.PickUpV2LiveMode) {
+                        await this.openMediationWebSocket(mediator);
                         // Start Pickup v2 protocol in live mode (retrieve any queued message before)
                         await this.messagePickupApi.pickupMessages({
                             connectionId: mediator.connectionId,
@@ -220,6 +221,7 @@ let MediationRecipientApi = class MediationRecipientApi {
                 // PickUp V2 in Live Mode will retrieve queued messages and then set up live delivery mode
                 this.logger.info(`Starting Live Mode pickup of messages from mediator '${mediatorRecord.id}'`);
                 await this.monitorMediatorWebSocketEvents(mediatorRecord, mediatorPickupStrategy);
+                await this.openMediationWebSocket(mediatorRecord);
                 await this.messagePickupApi.pickupMessages({
                     connectionId: mediatorConnection.id,
                     protocolVersion: 'v2',
