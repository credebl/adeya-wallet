import type { EndpointMetadataResult } from '@sphereon/oid4vci-common'

import {
  useConnectionById,
  AnonCredsCredentialsForProofRequest,
  AnonCredsProofFormat,
  AnonCredsProofFormatService,
  AnonCredsProofRequestRestriction,
  AnonCredsRequestedAttributeMatch,
  AnonCredsRequestedPredicateMatch,
  LegacyIndyProofFormat,
  LegacyIndyProofFormatService,
  ConnectionRecord,
  CredentialExchangeRecord,
  CredentialState,
  BasicMessageRecord,
  ProofExchangeRecord,
  ProofState,
  Buffer,
  BasicMessageRole,
  GetCredentialsForRequestReturn,
  ProofFormatDataMessagePayload,
  acceptInvitationFromUrl,
  createInvitation,
  AnonCredsRequestedPredicate,
  getCredentialsForProofRequest,
  AnonCredsPredicateType,
  AnonCredsRequestedAttribute,
  parseInvitationFromUrl,
  findByReceivedInvitationId,
  DidRecord,
  DidRepository,
  KeyType,
  DifPresentationExchangeProofFormatService,
  W3cCredentialRecord,
  JwkDidCreateOptions,
  KeyDidCreateOptions,
} from '@adeya/ssi'
// eslint-disable-next-line import/no-extraneous-dependencies
import {
  DifPresentationExchangeProofFormat,
  DifPresentationExchangeDefinitionV1,
  DidJwk,
  DidKey,
  JwaSignatureAlgorithm,
  SdJwtVcRecord,
  SdJwtVcRepository,
  W3cCredentialRepository,
  getJwkFromKey,
} from '@credo-ts/core'
import {
  OpenId4VciCredentialFormatProfile,
  OpenId4VciCredentialSupported,
  OpenId4VciCredentialSupportedWithId,
  OpenId4VciIssuerMetadataDisplay,
} from '@credo-ts/openid4vc'
import { CaptureBaseAttributeType } from '@hyperledger/aries-oca'
import { TFunction } from 'i18next'
import moment from 'moment'
import queryString from 'query-string'
import { ReactNode } from 'react'
import { DeviceEventEmitter } from 'react-native'
import { uniqueNamesGenerator, Config, names } from 'unique-names-generator'

import { EventTypes, domain } from '../constants'
import { i18n } from '../localization/index'
import { Role } from '../types/chat'
import { BifoldError } from '../types/error'
import { ProofCredentialAttributes, ProofCredentialItems, ProofCredentialPredicates } from '../types/proof-items'
import { Attribute, Predicate } from '../types/record'
import { ChildFn } from '../types/tour'

export { parsedCredDefNameFromCredential } from './cred-def'
import { AdeyaAgent } from './agent'
import { parseCredDefFromId } from './cred-def'
import { sanitizeString } from './credential'

export { parsedCredDefName } from './cred-def'
export { parsedSchema } from './schema'

export enum Orientation {
  Landscape = 'landscape',
  Portrait = 'portrait',
}

export const orientation = (width: number, height: number) => {
  return width > height ? Orientation.Landscape : Orientation.Portrait
}

export const isTablet = (width: number, height: number) => {
  const aspectRatio = height / width

  return aspectRatio < 1.6 // assume 4:3 for tablets
}

/**
 * Generates a numerical hash based on a given string
 * @see https://stackoverflow.com/questions/3426404/create-a-hexadecimal-colour-based-on-a-string-with-javascript
 * @param { string } s given string
 * @returns { number } numerical hash value
 */
export const hashCode = (s: string): number => {
  return s.split('').reduce((hash, char) => char.charCodeAt(0) + ((hash << 5) - hash), 0)
}

/**
 * Generates a pseudorandom number between 0 and 1 based on a seed
 * @see https://gist.github.com/tommyettinger/46a874533244883189143505d203312c
 * @see https://stackoverflow.com/questions/521295/seeding-the-random-number-generator-in-javascript
 * @param { number } seed any number
 * @returns { number } pseudorandom number between 0 and 1
 */
const mulberry32 = (seed: number) => {
  let t = (seed += 0x6d2b79f5)
  t = Math.imul(t ^ (t >>> 15), t | 1)
  t ^= t + Math.imul(t ^ (t >>> 7), t | 61)
  return ((t ^ (t >>> 14)) >>> 0) / 4294967296
}

/**
 * Converts a numerical hash into a hexidecimal color string
 * @see https://helderesteves.com/generating-random-colors-js/#Generating_random_dark_colors
 * @param { number } hash numerical hash value (generated by hashCode function above)
 * @returns { string } hexidecimal string eg. #32d3cc
 */
export const hashToRGBA = (hash: number) => {
  let color = '#'
  const colorRangeUpperBound = 256

  // once for r, g, b
  for (let i = 0; i < 3; i++) {
    // append a pseudorandom two-char hexidecimal value from the lower half of the color spectrum (to limit to darker colors)
    color += ('0' + Math.floor((mulberry32(hash + i) * colorRangeUpperBound) / 2).toString(16)).slice(-2)
  }

  return color
}

function getFormattedTimeForChatFormat(
  chatFormat: boolean,
  lessThanAMinuteAgo: boolean,
  lessThanAnHourAgo: boolean,
  sameDay: boolean,
  momentTime: moment.Moment,
  millisecondsAgo: number,
  hoursFormat: string,
): string | null {
  if (!chatFormat) return null
  if (lessThanAMinuteAgo) {
    return i18n.t('Date.JustNow')
  }
  if (lessThanAnHourAgo) {
    const minutesAgo = Math.floor(millisecondsAgo / 1000 / 60)
    return minutesAgo === 1 ? `1 ${i18n.t('Date.MinuteAgo')}` : `${minutesAgo} ${i18n.t('Date.MinutesAgo')}`
  }
  if (sameDay) {
    return momentTime.format(hoursFormat)
  }
  return null
}

function getFormattedTimeForSameDay(
  sameDay: boolean,
  trim: boolean,
  momentTime: moment.Moment,
  hoursFormat: string,
): string | null {
  if (sameDay && trim) {
    return momentTime.format(hoursFormat)
  }
  return null
}

function getFormattedTimeForFormat(format: string | undefined, momentTime: moment.Moment): string | null {
  if (format) {
    return momentTime.format(format)
  }
  return null
}

function getFormattedTimeForDefault(
  shortMonth: boolean | undefined,
  momentTime: moment.Moment,
  sameYear: boolean,
  trim: boolean,
  isNonEnglish: boolean,
  includeHour: boolean,
  hoursFormat: string,
): string {
  let formatString = i18n.t('Date.ShortFormat')
  if (!shortMonth) {
    formatString = i18n.t('Date.LongFormat')
  }
  if (formatString === 'Date.ShortFormat' || formatString === 'Date.LongFormat' || formatString === undefined) {
    formatString = 'MMM D'
  }
  let formattedTime =
    trim && sameYear
      ? momentTime.format(formatString)
      : isNonEnglish
      ? `${momentTime.format(formatString)} ${momentTime.format('YYYY')}`
      : `${momentTime.format(formatString)}, ${momentTime.format('YYYY')}`
  if (includeHour) {
    formattedTime = `${formattedTime}, ${momentTime.format(hoursFormat)}`
  }
  return formattedTime
}

function getFormattedTimeWithCustomMonth(
  customMonthFormat: string | undefined,
  momentTime: moment.Moment,
  monthKey: string,
  formattedTime: string,
): string {
  if (!customMonthFormat) return formattedTime
  let monthReplacement = ''
  const monthReplacementKey = momentTime.format(customMonthFormat)
  if (customMonthFormat.length === 3) {
    monthReplacement = i18n.t(`Date.MonthShort.${monthKey}`)
  } else if (customMonthFormat.length > 3) {
    monthReplacement = i18n.t(`Date.MonthLong.${monthKey}`)
  }
  if (monthReplacement === `Date.MonthLong.${monthKey}` || monthReplacement === `Date.MonthShort.${monthKey}`) {
    monthReplacement = monthReplacementKey
  }
  if (monthReplacement) {
    formattedTime = formattedTime.replace(monthReplacementKey, monthReplacement)
  }
  return formattedTime
}

/**
 *
 * @param time
 * @param params see below
 * shortMonth: whether to use Jun in place of June, Mar in place of March for example (overridden by `format`)
 * format: an optional custom moment format string to create the formatted date from
 * includeHour: whether to add the hour and minute and am/pm. eg 9:32 pm (overridden by `chatFormat` and `trim`)
 * chatFormat: whether to style the date to appear like a chat message timestamp eg. '7 minutes ago' or 'Just now'
 * trim: if true, if it's the same day the date will be trimmed to just the hour, if it's the same year then the year will be trimmed from the date
 * eg. if the current year is 2023, February 12, 2023 will be trimmed to February 12
 * @returns formatted time string
 */
export function formatTime(
  time: Date,
  params?: { shortMonth?: boolean; format?: string; includeHour?: boolean; chatFormat?: boolean; trim?: boolean },
): string {
  const momentTime = moment(time)
  const monthKey = momentTime.format('MMMM')
  const shortMonth = params?.shortMonth
  const format = params?.format
  const includeHour = Boolean(params?.includeHour)
  const chatFormat = Boolean(params?.chatFormat)
  const trim = Boolean(params?.trim)
  const millisecondsAgo = moment().diff(momentTime)
  const lessThanAMinuteAgo = millisecondsAgo / 1000 / 60 < 1
  const lessThanAnHourAgo = millisecondsAgo / 1000 / 60 / 60 < 1
  const now = new Date()
  const sameYear = time.getFullYear() === now.getFullYear()
  const sameDay = time.getDate() === now.getDate() && time.getMonth() === now.getMonth() && sameYear
  const isPortuguese = i18n.resolvedLanguage === 'pt-BR'
  const isNonEnglish = i18n.resolvedLanguage === 'fr' || isPortuguese
  const hoursFormat = isPortuguese ? 'HH:mm' : 'h:mm a'

  let formattedTime = getFormattedTimeForChatFormat(
    chatFormat,
    lessThanAMinuteAgo,
    lessThanAnHourAgo,
    sameDay,
    momentTime,
    millisecondsAgo,
    hoursFormat,
  )
  if (formattedTime) return formattedTime

  formattedTime = getFormattedTimeForSameDay(sameDay, trim, momentTime, hoursFormat)
  if (formattedTime) return formattedTime

  formattedTime = getFormattedTimeForFormat(format, momentTime)
  if (formattedTime) return formattedTime

  formattedTime = getFormattedTimeForDefault(
    shortMonth,
    momentTime,
    sameYear,
    trim,
    isNonEnglish,
    includeHour,
    hoursFormat,
  )

  const customMonthFormat = formattedTime?.match(/M+/)?.[0]
  return getFormattedTimeWithCustomMonth(customMonthFormat, momentTime, monthKey, formattedTime)
}

export function formatIfDate(format: string | undefined, value: string | number | null) {
  const potentialDate = value ? value.toString() : null
  if (format === 'YYYYMMDD' && potentialDate && potentialDate.length === format.length) {
    const year = potentialDate.substring(0, 4)
    const month = potentialDate.substring(4, 6)
    const day = potentialDate.substring(6, 8)
    // NOTE: JavaScript counts months from 0 to 11: January = 0, December = 11.
    const date = new Date(Number(year), Number(month) - 1, Number(day))
    if (!isNaN(date.getDate())) {
      return formatTime(date, { shortMonth: true })
    }
  }
  return value
}

/**
 * @deprecated The function should not be used
 */
export function connectionRecordFromId(connectionId?: string): ConnectionRecord | void {
  if (connectionId) {
    return useConnectionById(connectionId)
  }
}

export function getConnectionName(connection: ConnectionRecord | void): string | void {
  if (!connection) {
    return
  }
  return connection?.alias || connection?.theirLabel
}

export function getCredentialConnectionLabel(
  connections: ConnectionRecord[],
  credential?: CredentialExchangeRecord,
  connectionLabel?: string,
) {
  if (!credential) {
    if (connectionLabel) {
      return connectionLabel
    }
    return ''
  }

  if (credential.connectionId) {
    const connection = connections.find(connection => connection.id === credential.connectionId)
    return connection?.alias || connection?.theirLabel || credential.connectionId
  }

  return 'Unknown Contact'
}

export function getConnectionImageUrl(connectionId: string) {
  const connection = useConnectionById(connectionId)
  if (!connection) {
    return undefined
  }
  return connection.imageUrl ?? undefined
}

export function firstValidCredential(
  fields: AnonCredsRequestedAttributeMatch[] | AnonCredsRequestedPredicateMatch[],
  revoked = true,
): AnonCredsRequestedAttributeMatch | AnonCredsRequestedPredicateMatch | null {
  if (!fields.length) {
    return null
  }

  let first = null
  const firstNonRevoked = fields.filter(field => !field.revoked)[0]
  if (firstNonRevoked) {
    first = firstNonRevoked
  } else if (fields.length && revoked) {
    first = fields[0]
  }

  if (!first?.credentialInfo) {
    return null
  }

  return first
}

export const getOobDeepLink = async (url: string, agent: AdeyaAgent | undefined): Promise<any> => {
  const queryParams = queryString.parseUrl(url).query
  const b64Message = queryParams['d_m'] ?? queryParams['c_i']
  const rawmessage = Buffer.from(b64Message as string, 'base64').toString()
  const message = JSON.parse(rawmessage)
  await agent?.receiveMessage(message)
  return message
}

/**
 * A sorting function for the Array `sort()` function
 * @param a First retrieved credential
 * @param b Second retrieved credential
 */
export const credentialSortFn = (a: any, b: any) => {
  if (a.revoked && !b.revoked) {
    return 1
  } else if (!a.revoked && b.revoked) {
    return -1
  } else {
    return b.timestamp - a.timestamp
  }
}

const credNameFromRestriction = (queries?: AnonCredsProofRequestRestriction[]): string => {
  let schema_name = ''
  let cred_def_id = ''
  let schema_id = ''
  queries?.forEach(query => {
    schema_name = (query?.schema_name as string) ?? schema_name
    cred_def_id = (query?.cred_def_id as string) ?? cred_def_id
    schema_id = (query?.schema_id as string) ?? schema_id
  })
  if (schema_name && (schema_name.toLowerCase() !== 'default' || schema_name.toLowerCase() !== 'credential')) {
    return schema_name
  } else {
    return parseCredDefFromId(cred_def_id, schema_id)
  }
}

export const isDataUrl = (value: string | number | null) => {
  return typeof value === 'string' && value.startsWith('data:image/')
}

export type Fields = Record<string, AnonCredsRequestedAttributeMatch[] | AnonCredsRequestedPredicateMatch[]>

/**
 * Retrieve current credentials info filtered by `credentialDefinitionId` if given.
 * @param credDefId Credential Definition Id
 * @returns Array of `AnonCredsCredentialInfo`
 */
export const getCredentialInfo = (credId: string, fields: Fields): any[] => {
  const credentialInfo: any[] = []

  Object.keys(fields).forEach(proofKey => {
    credentialInfo.push(...fields[proofKey].map(attr => attr.credentialInfo))
  })

  return !credId ? credentialInfo : credentialInfo.filter(cred => cred.credentialId === credId)
}

/**
 * Evaluate if given attribute value satisfies the predicate.
 * @param attribute Credential attribute value
 * @param pValue Predicate value
 * @param pType Predicate type ({@link AnonCredsPredicateType})
 * @returns `true`if predicate is satisfied, otherwise `false`
 */
const evaluateOperation = (attribute: number, pValue: number, pType: AnonCredsPredicateType): boolean => {
  if (pType === '>=') {
    return attribute >= pValue
  }

  if (pType === '>') {
    return attribute > pValue
  }

  if (pType === '<=') {
    return attribute <= pValue
  }
  if (pType === '<') {
    return attribute < pValue
  }

  return false
}

/**
 * Given proof credential items, evaluate and return its predicates, setting `satisfied` property.
 * @param proofCredentialsItems
 * @returns Array of evaluated predicates
 */
export const evaluatePredicates =
  (fields: Fields, credId?: string) =>
  (proofCredentialItems: ProofCredentialItems): Predicate[] => {
    const predicates = proofCredentialItems.predicates
    if (!predicates || predicates.length == 0) {
      return []
    }

    if ((credId && credId != proofCredentialItems.credId) || !proofCredentialItems.credId) {
      return []
    }

    const credentialAttributes = getCredentialInfo(proofCredentialItems.credId, fields).map(ci => ci.attributes)

    return predicates.map((predicate: Predicate) => {
      const { pType, pValue, name: field } = predicate
      let satisfied = false

      if (field) {
        const attribute = credentialAttributes.find(attr => attr[field] != undefined)?.[field]

        if (attribute && pValue) {
          satisfied = evaluateOperation(Number(attribute), Number(pValue), pType as AnonCredsPredicateType)
        }
      }

      return { ...predicate, satisfied }
    })
  }

const addMissingDisplayAttributes = (attrReq: AnonCredsRequestedAttribute) => {
  const credName = credNameFromRestriction(attrReq.restrictions)
  //there is no credId in this context so use credName as a placeholder
  const processedAttributes: ProofCredentialAttributes = {
    credExchangeRecord: undefined,
    altCredentials: [credName],
    credId: credName,
    schemaId: undefined,
    credDefId: undefined,
    credName: credName,
    attributes: [] as Attribute[],
  }
  const { name, names } = attrReq
  for (const attributeName of [...(names ?? (name && [name]) ?? [])]) {
    processedAttributes.attributes?.push(
      new Attribute({
        revoked: false,
        credentialId: credName,
        name: attributeName,
        value: '',
      }),
    )
  }
  return processedAttributes
}

export const extractKeyFromPath = (path: string) => {
  // Remove the initial '$.' if present
  let cleanPath = path.replace(/^\$\./, '')

  // Replace ['key'] with .key
  cleanPath = cleanPath.replace(/\['/g, '.').replace(/'\]/g, '')

  // Split the cleaned path by dot to get the parts
  const parts = cleanPath.split('.')

  // Return the last part which is the key
  return parts[parts.length - 1]
}

const addW3CMissingDisplayAttributes = (attrReq: DifPresentationExchangeDefinitionV1['input_descriptors'][number]) => {
  const credName = attrReq.id

  //there is no credId in this context so use credName as a placeholder
  const processedAttributes: ProofCredentialAttributes = {
    credExchangeRecord: undefined,
    altCredentials: [credName],
    credId: credName,
    schemaId: undefined,
    credDefId: undefined,
    credName: credName,
    attributes: [] as Attribute[],
  }
  const { constraints } = attrReq

  const paths = constraints?.fields[0].path ?? []

  // Added a 0th path for now
  for (const attributeName of paths) {
    const attrName = extractKeyFromPath(attributeName)

    processedAttributes.attributes?.push(
      new Attribute({
        revoked: false,
        credentialId: credName,
        name: attrName,
        value: '',
      }),
    )
  }
  return processedAttributes
}

export const processW3CProofAttributes = (
  request?: ProofFormatDataMessagePayload<[DifPresentationExchangeProofFormat], 'request'> | undefined,
  credentials?: GetCredentialsForRequestReturn<[DifPresentationExchangeProofFormatService]>,
): { [key: string]: ProofCredentialAttributes } => {
  const processedAttributes = {} as { [key: string]: ProofCredentialAttributes }

  const requestedProofAttributes = request?.presentationExchange?.presentation_definition
  const retrievedCredentialAttributes = credentials?.proofFormats?.presentationExchange?.requirements

  if (!requestedProofAttributes || !retrievedCredentialAttributes) {
    return {}
  }
  for (const retrievedCredentialAttribute of retrievedCredentialAttributes) {
    const currentInputDescriptorId = retrievedCredentialAttribute.submissionEntry[0].inputDescriptorId

    const altCredentials = [...(retrievedCredentialAttribute.submissionEntry[0].verifiableCredentials ?? [])].map(
      cred => cred.credentialRecord.id,
    )

    const credentialList = [...(retrievedCredentialAttribute.submissionEntry[0].verifiableCredentials ?? [])]

    const inputDescriptor = requestedProofAttributes.input_descriptors.find(i => i.id === currentInputDescriptorId)

    if (credentialList.length <= 0) {
      const missingAttributes = addW3CMissingDisplayAttributes(inputDescriptor)
      if (!processedAttributes[missingAttributes.credName]) {
        processedAttributes[missingAttributes.credName] = missingAttributes
      } else {
        processedAttributes[missingAttributes.credName].attributes?.push(...(missingAttributes.attributes ?? []))
      }
    }

    // iterate over all credentials that satisfy the proof
    for (const credential of credentialList) {
      const w3cCredentialRecord = credential.credentialRecord as W3cCredentialRecord
      const credName = w3cCredentialRecord.credential.type[1]
      const paths = inputDescriptor.constraints?.fields[0].path ?? []

      const attributeNames = paths.map(path => extractKeyFromPath(path))
      for (const attributeName of attributeNames) {
        if (!processedAttributes[w3cCredentialRecord.id]) {
          // init processedAttributes object
          processedAttributes[w3cCredentialRecord.id] = {
            credExchangeRecord: w3cCredentialRecord,
            altCredentials,
            credId: w3cCredentialRecord.id,
            schemaId: undefined,
            credDefId: undefined,
            credName,
            attributes: [],
            inputDescriptorIds: [],
          }
        }

        const isInputDescriptorIdPresent = processedAttributes[w3cCredentialRecord.id].inputDescriptorIds?.find(
          id => id === currentInputDescriptorId,
        )

        if (!isInputDescriptorIdPresent) {
          processedAttributes[w3cCredentialRecord.id].inputDescriptorIds?.push(currentInputDescriptorId)
        }

        let attributeValue = ''
        if (w3cCredentialRecord) {
          attributeValue = w3cCredentialRecord.credential.credentialSubject.claims[attributeName]
        }
        processedAttributes[w3cCredentialRecord.id].attributes?.push(
          new Attribute({
            credentialId: w3cCredentialRecord.id,
            name: attributeName,
            value: attributeValue,
          }),
        )
      }
    }
  }

  return processedAttributes
}

export const processProofAttributes = (
  request?: ProofFormatDataMessagePayload<[LegacyIndyProofFormat, AnonCredsProofFormat], 'request'> | undefined,
  credentials?: GetCredentialsForRequestReturn<[LegacyIndyProofFormatService, AnonCredsProofFormatService]>,
  credentialRecords?: CredentialExchangeRecord[],
): { [key: string]: ProofCredentialAttributes } => {
  const processedAttributes = {} as { [key: string]: ProofCredentialAttributes }

  const requestedProofAttributes = request?.indy?.requested_attributes ?? request?.anoncreds?.requested_attributes
  const retrievedCredentialAttributes =
    credentials?.proofFormats?.indy?.attributes ?? credentials?.proofFormats?.anoncreds?.attributes

  // non_revoked interval can sometimes be top level
  const requestNonRevoked = request?.indy?.non_revoked ?? request?.anoncreds?.non_revoked

  if (!requestedProofAttributes || !retrievedCredentialAttributes) {
    return {}
  }
  for (const key of Object.keys(retrievedCredentialAttributes)) {
    const altCredentials = [...(retrievedCredentialAttributes[key] ?? [])]
      .sort(credentialSortFn)
      .map(cred => cred.credentialId)

    const credentialList = [...(retrievedCredentialAttributes[key] ?? [])].sort(credentialSortFn)

    const { name, names, non_revoked } = requestedProofAttributes[key]

    if (credentialList.length <= 0) {
      const missingAttributes = addMissingDisplayAttributes(requestedProofAttributes[key])
      if (!processedAttributes[missingAttributes.credName]) {
        processedAttributes[missingAttributes.credName] = missingAttributes
      } else {
        processedAttributes[missingAttributes.credName].attributes?.push(...(missingAttributes.attributes ?? []))
      }
    }

    //iterate over all credentials that satisfy the proof
    for (const credential of credentialList) {
      let credName = key
      if (credential?.credentialInfo?.credentialDefinitionId || credential?.credentialInfo?.schemaId) {
        credName = parseCredDefFromId(
          credential?.credentialInfo?.credentialDefinitionId,
          credential?.credentialInfo?.schemaId,
        )
      }
      let revoked = false
      let credExchangeRecord = undefined
      if (credential) {
        credExchangeRecord = credentialRecords?.find(record =>
          record.credentials.map(cred => cred.credentialRecordId).includes(credential.credentialId),
        )
        revoked = credExchangeRecord?.revocationNotification !== undefined
      } else {
        continue
      }
      for (const attributeName of [...(names ?? (name && [name]) ?? [])]) {
        if (!processedAttributes[credential?.credentialId]) {
          // init processedAttributes object
          processedAttributes[credential.credentialId] = {
            credExchangeRecord,
            altCredentials,
            credId: credential?.credentialId,
            schemaId: credential?.credentialInfo?.schemaId,
            credDefId: credential?.credentialInfo?.credentialDefinitionId,
            credName,
            attributes: [],
          }
        }

        let attributeValue = ''
        if (credential) {
          attributeValue = credential.credentialInfo.attributes[attributeName]
        }
        processedAttributes[credential.credentialId].attributes?.push(
          new Attribute({
            ...requestedProofAttributes[key],
            revoked,
            credentialId: credential.credentialId,
            name: attributeName,
            value: attributeValue,
            nonRevoked: requestNonRevoked ?? non_revoked,
          }),
        )
      }
    }
  }

  return processedAttributes
}

export const mergeAttributesAndPredicates = (
  attributes: { [key: string]: ProofCredentialAttributes },
  predicates: { [key: string]: ProofCredentialPredicates },
) => {
  const merged: { [key: string]: ProofCredentialAttributes & ProofCredentialPredicates } = { ...attributes }
  for (const [key, predicate] of Object.entries(predicates)) {
    const existingEntry = merged[key]
    if (existingEntry) {
      const mergedAltCreds = existingEntry?.altCredentials?.filter(
        (credId: string) => predicate?.altCredentials?.includes(credId),
      )
      merged[key] = { ...existingEntry, ...predicate }
      merged[key].altCredentials = mergedAltCreds
    } else {
      merged[key] = predicate
    }
  }
  return merged
}

const addMissingDisplayPredicates = (predReq: AnonCredsRequestedPredicate) => {
  const credName = credNameFromRestriction(predReq.restrictions)
  //there is no credId in this context so use credName as a placeholder
  const processedPredicates: ProofCredentialPredicates = {
    credExchangeRecord: undefined,
    altCredentials: [credName],
    credId: credName,
    schemaId: undefined,
    credDefId: undefined,
    credName: credName,
    predicates: [] as Predicate[],
  }
  const { name, p_type: pType, p_value: pValue } = predReq

  processedPredicates.predicates?.push(
    new Predicate({
      revoked: false,
      credentialId: credName,
      name: name,
      pValue,
      pType,
    }),
  )
  return processedPredicates
}

export const processProofPredicates = (
  request?: ProofFormatDataMessagePayload<[LegacyIndyProofFormat, AnonCredsProofFormat], 'request'> | undefined,
  credentials?: GetCredentialsForRequestReturn<[LegacyIndyProofFormatService, AnonCredsProofFormatService]>,
  credentialRecords?: CredentialExchangeRecord[],
): { [key: string]: ProofCredentialPredicates } => {
  const processedPredicates = {} as { [key: string]: ProofCredentialPredicates }
  const requestedProofPredicates = request?.anoncreds?.requested_predicates ?? request?.indy?.requested_predicates
  const retrievedCredentialPredicates =
    credentials?.proofFormats?.anoncreds?.predicates ?? credentials?.proofFormats?.indy?.predicates

  if (!requestedProofPredicates || !retrievedCredentialPredicates) {
    return {}
  }

  // non_revoked interval can sometimes be top level
  const requestNonRevoked = request?.indy?.non_revoked ?? request?.anoncreds?.non_revoked

  for (const key of Object.keys(retrievedCredentialPredicates)) {
    const altCredentials = [...(retrievedCredentialPredicates[key] ?? [])]
      .sort(credentialSortFn)
      .map(cred => cred.credentialId)

    const credentialList = [...(retrievedCredentialPredicates[key] ?? [])].sort(credentialSortFn)
    const { name, p_type: pType, p_value: pValue, non_revoked } = requestedProofPredicates[key]
    if (credentialList.length <= 0) {
      const missingPredicates = addMissingDisplayPredicates(requestedProofPredicates[key])
      if (!processedPredicates[missingPredicates.credName]) {
        processedPredicates[missingPredicates.credName] = missingPredicates
      } else {
        processedPredicates[missingPredicates.credName].predicates?.push(...(missingPredicates.predicates ?? []))
      }
    }

    for (const credential of credentialList) {
      let revoked = false
      let credExchangeRecord = undefined
      if (credential) {
        credExchangeRecord = credentialRecords?.find(record =>
          record.credentials.map(cred => cred.credentialRecordId).includes(credential.credentialId),
        )
        revoked = credExchangeRecord?.revocationNotification !== undefined
      } else {
        continue
      }
      const { credentialDefinitionId, schemaId } = { ...credential, ...credential?.credentialInfo }

      const credNameRestriction = credNameFromRestriction(requestedProofPredicates[key]?.restrictions)

      let credName = credNameRestriction ?? key
      if (credential?.credentialInfo?.credentialDefinitionId || credential?.credentialInfo?.schemaId) {
        credName = parseCredDefFromId(
          credential?.credentialInfo?.credentialDefinitionId,
          credential?.credentialInfo?.schemaId,
        )
      }

      if (!processedPredicates[credential.credentialId]) {
        processedPredicates[credential.credentialId] = {
          altCredentials,
          credExchangeRecord,
          credId: credential.credentialId,
          schemaId,
          credDefId: credentialDefinitionId,
          credName: credName,
          predicates: [],
        }
      }

      processedPredicates[credential.credentialId].predicates?.push(
        new Predicate({
          ...requestedProofPredicates[key],
          credentialId: credential?.credentialId,
          name,
          revoked,
          pValue,
          pType,
          nonRevoked: requestNonRevoked ?? non_revoked,
        }),
      )
    }
  }
  return processedPredicates
}

export const retrieveCredentialsForProof = async (
  agent: AdeyaAgent,
  proof: ProofExchangeRecord,
  fullCredentials: CredentialExchangeRecord[],
  t: TFunction<'translation', undefined>,
) => {
  try {
    const format = await agent.proofs.getFormatData(proof.id)
    const hasPresentationExchange = format.request?.presentationExchange !== undefined
    const hasAnonCreds = format.request?.anoncreds !== undefined
    const hasIndy = format.request?.indy !== undefined
    const credentials = await getCredentialsForProofRequest(agent, {
      proofRecordId: proof.id,
      proofFormats: {
        // AFJ will try to use the format, even if the value is undefined (but the key is present)
        // We should ignore the key, if the value is undefined. For now this is a workaround.
        ...(hasIndy
          ? {
              indy: {
                // Setting `filterByNonRevocationRequirements` to `false` returns all
                // credentials even if they are revokable (and revoked). We need this to
                // be able to show why a proof cannot be satisfied. Otherwise we can only
                // show failure.
                filterByNonRevocationRequirements: false,
              },
            }
          : {}),

        ...(hasAnonCreds
          ? {
              anoncreds: {
                // Setting `filterByNonRevocationRequirements` to `false` returns all
                // credentials even if they are revokable (and revoked). We need this to
                // be able to show why a proof cannot be satisfied. Otherwise we can only
                // show failure.
                filterByNonRevocationRequirements: false,
              },
            }
          : {}),
        ...(hasPresentationExchange ? { presentationExchange: {} } : {}),
      },
    })
    if (!credentials) {
      throw new Error(t('ProofRequest.RequestedCredentialsCouldNotBeFound'))
    }

    if (!format) {
      throw new Error(t('ProofRequest.RequestedCredentialsCouldNotBeFound'))
    }

    if (!(format && credentials && fullCredentials)) {
      return
    }

    if (hasPresentationExchange) {
      const presentationExchange = format.request?.presentationExchange
      const difPexCredentialsForRequest = credentials.proofFormats.presentationExchange

      if (!difPexCredentialsForRequest || !presentationExchange) throw new Error('Invalid presentation request')

      const attributes = processW3CProofAttributes(format.request, credentials)

      const proofFormat = credentials.proofFormats.presentationExchange

      const groupedProof = Object.values(attributes)
      return { groupedProof: groupedProof, retrievedCredentials: proofFormat, fullCredentials }
    }

    const proofFormat = credentials.proofFormats.anoncreds ?? credentials.proofFormats.indy

    const attributes = processProofAttributes(format.request, credentials, fullCredentials)
    const predicates = processProofPredicates(format.request, credentials, fullCredentials)

    const groupedProof = Object.values(mergeAttributesAndPredicates(attributes, predicates))
    return { groupedProof: groupedProof, retrievedCredentials: proofFormat, fullCredentials }
  } catch (err: unknown) {
    const error = new BifoldError(t('Error.Title1043'), t('Error.Message1043'), (err as Error)?.message ?? err, 1043)
    DeviceEventEmitter.emit(EventTypes.ERROR_ADDED, error)
  }
}

export const pTypeToText = (
  item: Predicate,
  t: TFunction<'translation', undefined>,
  attributeTypes?: Record<string, string>,
) => {
  const itemCopy = { ...item }
  const pTypeMap: { [key: string]: string | undefined } = {
    '>=': t('ProofRequest.PredicateGe'),
    '>': t('ProofRequest.PredicateGr'),
    '<=': t('ProofRequest.PredicateLe'),
    '<': t('ProofRequest.PredicateLs'),
  }
  const pTypeDateMap: { [key: string]: string | undefined } = {
    '>=': t('ProofRequest.PredicateGeDate'),
    '>': t('ProofRequest.PredicateGeDate'),
    '<=': t('ProofRequest.PredicateLeDate'),
    '<': t('ProofRequest.PredicateLeDate'),
  }
  const pTypeDateOffset: { [key: string]: number | undefined } = {
    '>=': -1,
    '<=': 1,
  }
  if (attributeTypes && attributeTypes[item.name ?? ''] == CaptureBaseAttributeType.DateTime) {
    itemCopy.pType = pTypeDateMap[item.pType] ?? item.pType
    itemCopy.pValue = parseInt(`${itemCopy.pValue}`) + (pTypeDateOffset[item.pType] ?? 0)
  } else {
    itemCopy.pType = pTypeMap[item.pType] ?? item.pType
  }
  return itemCopy
}

/**
 * @deprecated The function should not be used
 */
export const sortCredentialsForAutoSelect = (
  credentials: AnonCredsCredentialsForProofRequest,
): AnonCredsCredentialsForProofRequest => {
  const requestedAttributes = Object.values(credentials?.attributes).pop()
  const requestedPredicates = Object.values(credentials?.predicates).pop()
  const sortFn = (a: any, b: any) => {
    if (a.revoked && !b.revoked) {
      return 1
    } else if (!a.revoked && b.revoked) {
      return -1
    } else {
      return b.timestamp - a.timestamp
    }
  }

  requestedAttributes && requestedAttributes.sort(sortFn)
  requestedPredicates && requestedPredicates.sort(sortFn)

  return credentials
}

export const isValidUrl = (url: string) => {
  try {
    return Boolean(new URL(url))
  } catch (e) {
    return false
  }
}

/**
 *
 * @param url a redirection URL to retrieve a payload for an invite
 * @param agent an Agent instance
 * @returns payload from following the redirection
 */
export const receiveMessageFromUrlRedirect = async (url: string, agent: AdeyaAgent | undefined) => {
  const res = await fetch(url, {
    method: 'GET',
    headers: { Accept: 'application/json', 'Content-Type': 'application/json' },
  })
  const message = await res.json()
  await agent?.receiveMessage(message)
  return message
}

/**
 *
 * @param url a redirection URL to retrieve a payload for an invite
 * @param agent an Agent instance
 * @returns payload from following the redirection
 */
export const receiveMessageFromDeepLink = async (url: string, agent: AdeyaAgent | undefined) => {
  const res = await fetch(url, {
    method: 'GET',
    headers: { Accept: 'application/json', 'Content-Type': 'application/json' },
  })
  const message = await res.json()
  await agent?.receiveMessage(message)
  return message
}

/**
 *
 * @param agent an Agent instance
 * @param uri a URI containing a base64 encoded connection invite in the query parameter
 * @returns boolean indicating if the connection was already established
 */
export const checkIfAlreadyConnected = async (agent: AdeyaAgent, invitationUrl: string) => {
  const invitation = await parseInvitationFromUrl(agent, invitationUrl)
  const outOfBandRecord = await findByReceivedInvitationId(agent, invitation.id)

  if (outOfBandRecord) {
    return true
  }

  return false
}

/**
 *
 * @param uri a URI containing a base64 encoded connection invite in the query parameter
 * @returns a connection record from parsing and receiving the invitation
 */
export const connectFromInvitation = async (agent: AdeyaAgent, uri: string) => {
  return await acceptInvitationFromUrl(agent, uri)
}

/**
 * Create a new connection invitation
 *
 * @param goalCode add goalCode to connection invitation
 * @returns a connection record
 */
export const createConnectionInvitation = async (agent: AdeyaAgent, goalCode?: string) => {
  return createInvitation(agent, domain, { goalCode })
}

/**
 * Create a new connection invitation with a goal code specifying that it will be deleted after issuing or verifying once depending on type
 *
 * @param agent an Agent instance
 * @param type add goalCode to connection invitation
 * @returns a connection record
 */
export const createTempConnectionInvitation = async (agent: AdeyaAgent, type: 'issue' | 'verify') => {
  return createConnectionInvitation(agent, `aries.vc.${type}.once`)
}

/**
 * Fetch data from a URL
 */
export const fetchUrlData = async (url: string) => {
  const res = await fetch(url, {
    method: 'GET',
    headers: { Accept: 'application/json', 'Content-Type': 'application/json' },
  })
  return await res.json()
}

/**
 * Parse URL from provided string
 * @param urlString string to parse
 * @returns ParsedUur object if success or undefined
 */
export const getUrl = (urlString: string): queryString.ParsedUrl | undefined => {
  try {
    return queryString.parseUrl(urlString)
  } catch (e) {
    return undefined
  }
}

/**
 * Parse JSON from provided string
 * @param jsonString string to parse
 * @returns JSON object if success or undefined
 */
export const getJson = (jsonString: string): Record<string, unknown> | undefined => {
  try {
    return JSON.parse(jsonString)
  } catch (e) {
    return undefined
  }
}

/**
 * Typeguard to check if any React children is represented as a function
 * instead of a Node. I,e., when it's a {@link ChildFn}.
 *
 * @param children any React children
 * @returns true if the children is a function, false otherwise
 */
export function isChildFunction<T>(children: ReactNode | ChildFn<T>): children is ChildFn<T> {
  return typeof children === 'function'
}

export function getCredentialEventRole(record: CredentialExchangeRecord) {
  switch (record.state) {
    // assuming only Holder states are supported here
    case CredentialState.ProposalSent:
      return Role.me
    case CredentialState.OfferReceived:
      return Role.them
    case CredentialState.RequestSent:
      return Role.me
    case CredentialState.Declined:
      return Role.me
    case CredentialState.CredentialReceived:
      return Role.me
    case CredentialState.Done:
      return Role.me
    default:
      return Role.me
  }
}

export function getCredentialEventLabel(record: CredentialExchangeRecord) {
  switch (record.state) {
    // assuming only Holder states are supported here
    case CredentialState.ProposalSent:
      return 'Chat.CredentialProposalSent'
    case CredentialState.OfferReceived:
      return 'Chat.CredentialOfferReceived'
    case CredentialState.RequestSent:
      return 'Chat.CredentialRequestSent'
    case CredentialState.Declined:
      return 'Chat.CredentialDeclined'
    case CredentialState.CredentialReceived:
    case CredentialState.Done:
      return 'Chat.CredentialReceived'
    default:
      return ''
  }
}

export function getProofEventRole(record: ProofExchangeRecord) {
  switch (record.state) {
    case ProofState.RequestSent:
      return Role.me
    case ProofState.ProposalReceived:
      return Role.me
    case ProofState.PresentationReceived:
      return Role.them
    case ProofState.RequestReceived:
      return Role.me
    case ProofState.ProposalSent:
    case ProofState.PresentationSent:
      return Role.me
    case ProofState.Declined:
      return Role.me
    case ProofState.Abandoned:
      return Role.them
    case ProofState.Done:
      return record.isVerified !== undefined ? Role.them : Role.me
    default:
      return Role.me
  }
}

export function getProofEventLabel(record: ProofExchangeRecord) {
  switch (record.state) {
    case ProofState.RequestSent:
    case ProofState.ProposalReceived:
      return 'Chat.ProofRequestSent'
    case ProofState.PresentationReceived:
      return 'Chat.ProofPresentationReceived'
    case ProofState.RequestReceived:
      return 'Chat.ProofRequestReceived'
    case ProofState.ProposalSent:
    case ProofState.PresentationSent:
      return 'Chat.ProofRequestSatisfied'
    case ProofState.Declined:
      return 'Chat.ProofRequestRejected'
    case ProofState.Abandoned:
      return 'Chat.ProofRequestRejectReceived'
    case ProofState.Done:
      return record.isVerified !== undefined ? 'Chat.ProofPresentationReceived' : 'Chat.ProofRequestSatisfied'
    default:
      return ''
  }
}

export function getMessageEventRole(record: BasicMessageRecord) {
  return record.role === BasicMessageRole.Sender ? Role.me : Role.them
}

export function generateRandomWalletName() {
  let name: number | string = ''
  const separator: string = '-'
  const config: Config = {
    dictionaries: [names],
    separator: '-',
  }
  const characterName: string = uniqueNamesGenerator(config)
  const length = 10
  name = characterName.concat(separator).concat(
    Math.round(Math.pow(36, length + 1) - Math.random() * Math.pow(36, length))
      .toString(36)
      .slice(1),
  )
  return name
}

export const getDefaultHolderDidDocument = async (agent: AdeyaAgent) => {
  try {
    let defaultDidRecord: DidRecord | null
    const didRepository = await agent.dependencyManager.resolve(DidRepository)

    defaultDidRecord = await didRepository.findSingleByQuery(agent.context, {
      isDefault: true,
    })

    if (!defaultDidRecord) {
      const did = await agent.dids.create({
        method: 'key',
        options: {
          keyType: KeyType.Ed25519,
        },
      })

      const [didRecord] = await agent.dids.getCreatedDids({
        did: did.didState.did,
        method: 'key',
      })

      didRecord.setTag('isDefault', true)

      await didRepository.update(agent.context, didRecord)
      defaultDidRecord = didRecord
    }

    const resolvedDidDocument = await agent.dids.resolveDidDocument(defaultDidRecord.did)

    return resolvedDidDocument
  } catch (error) {
    // eslint-disable-next-line no-console
    console.log('Error did create', error)
  }
}

export enum InvitationQrTypesSupported {
  OPENID = 'openid://',
  OPENID_INITIATE_ISSUANCE = 'openid-initiate-issuance://',
  OPENID_CREDENTIAL_OFFER = 'openid-credential-offer://',
  OPENID4VP = 'openid4vp://',
  OPENID_VC = 'openid-vc://',
}

export type ParseInvitationResult =
  | {
      success: true
      result: ParsedInvitation
    }
  | {
      success: false
      error: string
    }

export type ParsedInvitation = {
  type: 'openid-credential-offer' | 'openid-authorization-request'
  format: 'url' | 'parsed'
  data: string | Record<string, unknown>
}

export const isOpenIdCredentialOffer = (url: string) => {
  if (
    url.startsWith(InvitationQrTypesSupported.OPENID_INITIATE_ISSUANCE) ||
    url.startsWith(InvitationQrTypesSupported.OPENID_CREDENTIAL_OFFER)
  ) {
    return true
  }

  if (url.includes('credential_offer_uri=') || url.includes('credential_offer=')) {
    return true
  }

  return false
}

export const isOpenIdPresentationRequest = (url: string) => {
  if (
    url.startsWith(InvitationQrTypesSupported.OPENID) ||
    url.startsWith(InvitationQrTypesSupported.OPENID_VC) ||
    url.startsWith(InvitationQrTypesSupported.OPENID4VP)
  ) {
    return true
  }

  if (url.includes('request_uri=') || url.includes('request=')) {
    return true
  }

  return false
}

export function parseInvitationUrl(invitationUrl: string): ParseInvitationResult {
  if (isOpenIdCredentialOffer(invitationUrl)) {
    return {
      success: true,
      result: {
        format: 'url',
        type: 'openid-credential-offer',
        data: invitationUrl,
      },
    }
  }

  if (isOpenIdPresentationRequest(invitationUrl)) {
    return {
      success: true,
      result: {
        format: 'url',
        type: 'openid-authorization-request',
        data: invitationUrl,
      },
    }
  }

  return {
    success: false,
    error: 'Invitation not recognized.',
  }
}

export interface OpenId4VcCredentialMetadata {
  credential: {
    display?: OpenId4VciCredentialSupported['display']
    order?: OpenId4VciCredentialSupported['order']
  }
  issuer: {
    display?: OpenId4VciIssuerMetadataDisplay[]
    id: string
  }
}

const openId4VcCredentialMetadataKey = '_adeya/openId4VcCredentialMetadata'

export function extractOpenId4VcCredentialMetadata(
  credentialMetadata: OpenId4VciCredentialSupported,
  serverMetadata: EndpointMetadataResult,
): OpenId4VcCredentialMetadata {
  return {
    credential: {
      display: credentialMetadata.display,
      order: credentialMetadata.order,
    },
    issuer: {
      display: serverMetadata.credentialIssuerMetadata?.display,
      id: serverMetadata.issuer,
    },
  }
}

export function setOpenId4VcCredentialMetadata(
  credentialRecord: W3cCredentialRecord | SdJwtVcRecord,
  metadata: OpenId4VcCredentialMetadata,
) {
  credentialRecord.metadata.set(openId4VcCredentialMetadataKey, metadata)
}

export function getOpenId4VcCredentialMetadata(
  credentialRecord: W3cCredentialRecord | SdJwtVcRecord,
): OpenId4VcCredentialMetadata | null {
  return credentialRecord.metadata.get(openId4VcCredentialMetadataKey)
}

export const receiveCredentialFromOpenId4VciOffer = async ({
  agent,
  data,
  uri,
}: {
  agent: AdeyaAgent
  // Either data itself (the offer) or uri can be passed
  data?: string
  uri?: string
}) => {
  let offerUri = uri

  if (!offerUri && data) {
    // FIXME: Credo only support credential offer string, but we already parsed it before. So we construct an offer here
    // but in the future we need to support the parsed offer in Credo directly
    offerUri = `openid-credential-offer://credential_offer=${encodeURIComponent(JSON.stringify(data))}`
  } else if (!offerUri) {
    throw new Error('either data or uri must be provided')
  }

  agent.config.logger.info(`Receiving openid uri ${offerUri}`, {
    offerUri,
    data,
    uri,
  })
  const resolvedCredentialOffer = await agent.modules.openId4VcHolder.resolveCredentialOffer(offerUri)

  // FIXME: return credential_supported entry for credential so it's easy to store metadata
  const credentials = await agent.modules.openId4VcHolder.acceptCredentialOfferUsingPreAuthorizedCode(
    resolvedCredentialOffer,
    {
      credentialBindingResolver: async ({
        supportedDidMethods,
        keyType,
        supportsAllDidMethods,
        supportsJwk,
        credentialFormat,
      }) => {
        // First, we try to pick a did method
        // Prefer did:jwk, otherwise use did:key, otherwise use undefined
        let didMethod: 'key' | 'jwk' | undefined =
          supportsAllDidMethods || supportedDidMethods?.includes('did:jwk')
            ? 'jwk'
            : supportedDidMethods?.includes('did:key')
            ? 'key'
            : undefined

        // If supportedDidMethods is undefined, and supportsJwk is false, we will default to did:key
        // this is important as part of MATTR launchpad support which MUST use did:key but doesn't
        // define which did methods they support
        if (!supportedDidMethods && !supportsJwk) {
          didMethod = 'key'
        }

        if (didMethod) {
          const didResult = await agent.dids.create<JwkDidCreateOptions | KeyDidCreateOptions>({
            method: didMethod,
            options: {
              keyType,
            },
          })

          if (didResult.didState.state !== 'finished') {
            throw new Error('DID creation failed.')
          }

          let verificationMethodId: string
          if (didMethod === 'jwk') {
            const didJwk = DidJwk.fromDid(didResult.didState.did)
            verificationMethodId = didJwk.verificationMethodId
          } else {
            const didKey = DidKey.fromDid(didResult.didState.did)
            verificationMethodId = `${didKey.did}#${didKey.key.fingerprint}`
          }

          return {
            didUrl: verificationMethodId,
            method: 'did',
          }
        }

        // Otherwise we also support plain jwk for sd-jwt only
        if (supportsJwk && credentialFormat === OpenId4VciCredentialFormatProfile.SdJwtVc) {
          const key = await agent.wallet.createKey({
            keyType,
          })
          return {
            method: 'jwk',
            jwk: getJwkFromKey(key),
          }
        }

        throw new Error(
          `No supported binding method could be found. Supported methods are did:key and did:jwk, or plain jwk for sd-jwt. Issuer supports ${
            supportsJwk ? 'jwk, ' : ''
          }${supportedDidMethods?.join(', ') ?? 'Unknown'}`,
        )
      },

      verifyCredentialStatus: false,
      allowedProofOfPossessionSignatureAlgorithms: [
        // NOTE: MATTR launchpad for JFF MUST use EdDSA. So it is important that the default (first allowed one)
        // is EdDSA. The list is ordered by preference, so if no suites are defined by the issuer, the first one
        // will be used
        JwaSignatureAlgorithm.EdDSA,
        JwaSignatureAlgorithm.ES256,
      ],
    },
  )

  const [firstCredential] = credentials
  if (!firstCredential) throw new Error('Error retrieving credential using pre authorized flow.')

  let record: SdJwtVcRecord | W3cCredentialRecord

  // TODO: add claimFormat to SdJwtVc

  if ('compact' in firstCredential) {
    record = new SdJwtVcRecord({
      compactSdJwtVc: firstCredential.compact,
    })
  } else {
    record = new W3cCredentialRecord({
      credential: firstCredential,
      // We don't support expanded types right now, but would become problem when we support JSON-LD
      tags: {},
    })
  }

  const openId4VcMetadata = extractOpenId4VcCredentialMetadata(
    resolvedCredentialOffer.offeredCredentials[0] as OpenId4VciCredentialSupportedWithId,
    resolvedCredentialOffer.metadata,
  )

  setOpenId4VcCredentialMetadata(record, openId4VcMetadata)

  return record
}

export interface DisplayImage {
  url?: string
  altText?: string
}

export interface CredentialDisplay {
  name: string
  locale?: string
  description?: string
  textColor?: string
  backgroundColor?: string
  backgroundImage?: DisplayImage
  issuer: CredentialIssuerDisplay
}

export interface CredentialIssuerDisplay {
  name: string
  locale?: string
  logo?: DisplayImage
}

function findDisplay<Display extends { locale?: string }>(display?: Display[]): Display | undefined {
  if (!display) return undefined

  let item = display.find(d => d.locale?.startsWith('en-'))
  if (!item) item = display.find(d => !d.locale)
  if (!item) item = display[0]

  return item
}

const urlRegex = /^(.*:)\/\/([A-Za-z0-9-.]+)(:[0-9]+)?(.*)$/

export function getHostNameFromUrl(url: string) {
  const parts = urlRegex.exec(url)
  return parts ? parts[2] : undefined
}

export function getW3cIssuerDisplay(
  credential: W3cCredentialJson,
  openId4VcMetadata?: OpenId4VcCredentialMetadata | null,
): CredentialIssuerDisplay {
  const issuerDisplay: Partial<CredentialIssuerDisplay> = {}

  // Try to extract from openid metadata first
  if (openId4VcMetadata) {
    const openidIssuerDisplay = findDisplay(openId4VcMetadata.issuer.display)

    if (openidIssuerDisplay) {
      issuerDisplay.name = openidIssuerDisplay.name

      if (openidIssuerDisplay.logo) {
        issuerDisplay.logo = {
          url: openidIssuerDisplay.logo?.url,
          altText: openidIssuerDisplay.logo?.alt_text,
        }
      }
    }

    // If the credentialDisplay contains a logo, and the issuerDisplay does not, use the logo from the credentialDisplay
    const openidCredentialDisplay = findDisplay(openId4VcMetadata.credential.display)
    if (openidCredentialDisplay && !issuerDisplay.logo && openidCredentialDisplay.logo) {
      issuerDisplay.logo = {
        url: openidCredentialDisplay.logo?.url,
        altText: openidCredentialDisplay.logo?.alt_text,
      }
    }
  }

  // If openid metadata is not available, try to extract display metadata from the credential based on JFF metadata
  const jffCredential = credential as any
  const issuerJson = typeof jffCredential.issuer === 'string' ? undefined : jffCredential.issuer

  // Issuer Display from JFF
  if (!issuerDisplay.logo || !issuerDisplay.logo.url) {
    if (issuerJson?.logoUrl) {
      issuerDisplay.logo = {
        url: issuerJson?.logoUrl,
      }
    } else if (issuerJson?.image) {
      issuerDisplay.logo = {
        url: typeof issuerJson.image === 'string' ? issuerJson.image : issuerJson.image.id,
      }
    }
  }

  // Issuer name from JFF
  if (!issuerDisplay.name) {
    issuerDisplay.name = issuerJson?.name
  }

  // Last fallback: use issuer id from openid4vc
  if (!issuerDisplay.name && openId4VcMetadata?.issuer.id) {
    issuerDisplay.name = getHostNameFromUrl(openId4VcMetadata.issuer.id)
  }

  return {
    ...issuerDisplay,
    name: issuerDisplay.name ?? 'Unknown',
  }
}

export type W3cIssuerJson = {
  id: string
}

export type W3cCredentialSubjectJson = {
  id?: string
  [key: string]: unknown
}

export type W3cCredentialJson = {
  type: Array<string>
  issuer: W3cIssuerJson
  issuanceDate: string
  expiryDate?: string
  credentialSubject: W3cCredentialSubjectJson | W3cCredentialSubjectJson[]
}

export function getW3cCredentialDisplay(
  credential: W3cCredentialJson,
  openId4VcMetadata?: OpenId4VcCredentialMetadata | null,
) {
  const credentialDisplay: Partial<CredentialDisplay> = {}

  if (openId4VcMetadata) {
    const openidCredentialDisplay = findDisplay(openId4VcMetadata.credential.display)

    if (openidCredentialDisplay) {
      credentialDisplay.name = openidCredentialDisplay.name
      credentialDisplay.description = openidCredentialDisplay.description
      credentialDisplay.textColor = openidCredentialDisplay.text_color
      credentialDisplay.backgroundColor = openidCredentialDisplay.background_color

      if (openidCredentialDisplay.background_image) {
        credentialDisplay.backgroundImage = {
          url: openidCredentialDisplay.background_image.url,
          altText: openidCredentialDisplay.background_image.alt_text,
        }
      }

      // NOTE: logo is used in issuer display (not sure if that's right though)
    }
  }

  // If openid metadata is not available, try to extract display metadata from the credential based on JFF metadata
  const jffCredential = credential as any

  if (!credentialDisplay.name) {
    credentialDisplay.name = jffCredential.name
  }

  // If there's no name for the credential, we extract it from the last type
  // and sanitize it. This is not optimal. But provides at least something.
  if (!credentialDisplay.name && jffCredential.type.length > 1) {
    const lastType = jffCredential.type[jffCredential.type.length - 1]
    if (lastType && !lastType.startsWith('http')) {
      credentialDisplay.name = sanitizeString(lastType)
    }
  }

  return {
    ...credentialDisplay,
    name: credentialDisplay.name ?? 'Credential',
  }
}

export async function storeCredential(agent: AdeyaAgent, credentialRecord: W3cCredentialRecord | SdJwtVcRecord) {
  if (credentialRecord instanceof W3cCredentialRecord) {
    await agent.dependencyManager.resolve(W3cCredentialRepository).save(agent.context, credentialRecord)
  } else {
    await agent.dependencyManager.resolve(SdJwtVcRepository).save(agent.context, credentialRecord)
  }
}
